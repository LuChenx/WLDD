<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"  
    default-lazy-init="true">  

    <description>Shiro Configuration</description>  

    <!-- Shiro's main business-tier object for web-enabled applications -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="UserRealm" />  
        <property name="cacheManager" ref="cacheManager" />  
        <property name="sessionManager" ref="sessionManager" /> 
    </bean> 
     <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
    <bean  
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
        <property name="staticMethod"  
            value="org.apache.shiro.SecurityUtils.setSecurityManager" />  
        <property name="arguments" ref="securityManager" />  
    </bean> 

    <!-- 項目自定义的Realm -->  
    <bean id="UserRealm" class="com.wldd.shiro.UserRealm">  
        <property name="cacheManager" ref="cacheManager" />  
    </bean>  

    <!-- Shiro Filter -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- 没啥好说的，必配的，自己看着办 --> 
        <property name="securityManager" ref="securityManager" />  
        <!-- 配置我们的登录请求地址 -->  
        <property name="loginUrl" value="/index.jsp" />  
        <property name="unauthorizedUrl" value="/views/accountExamine.jsp" />
        <property name="filterChainDefinitions">  
            <value>  
             	<!-- 静态资源允许访问 -->  
                /include/** = anon  
                /resource/** = anon  
                <!-- 登录页允许访问 -->  
                /index.jsp= anon  
                <!-- 注册界面允许未登入访问 -->
                /views/register.jsp = anon
                /views/personregister.jsp = anon
                /toregister.do = anon
                /toregisterperson.do = anon
                /register.do = anon
                /personregister.do = anon
                /accountCheck.do = anon
                /registerUserInfo.do = anon
                /registerPUserInfo.do = anon
                /registerShopInfo.do = anon
                /login.do = anon
                <!-- 卖家账号需要通过审核后才能去下订单 -->  
                /toSendOrder.do = authc,perms[pass]
                /toCompleteOrder.do = authc,perms[pass]
                /toUnCompleteOrder.do = authc,perms[pass]
                <!-- 其他资源需要认证 --> 
                /accountExamine.do = authc
                /views/accountExamine.jsp = authc
                /** = authc 
                <!--              	
					举几个例子
					/admin=authc,roles[admin] 表示用户必需已通过认证,并拥有admin角色才可以正常发起’/admin’请求
					/edit=authc,perms[admin:edit] 表示用户必需已通过认证,并拥有admin:edit权限才可以正常发起’/edit’请求
					/home=user 表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起’/home’请求      
					
					anon:例子/admins/**=anon 没有参数，表示可以匿名使用。

					authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
					
					roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
					当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
					
					perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
					例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
					
					rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,
					其中method为post，get，delete等。
					
					port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
					其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString
					
					是你访问的url里的？后面的参数。
					
					authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
					
					ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
					
					user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
					
					注：anon，authcBasic，auchc，user是认证过滤器，
					
					perms，roles，ssl，rest，port是授权过滤器   
                 -->
            </value>  
        </property>  
    </bean>  

	<!-- 凭证匹配器 -->  
    <bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">  
        <property name="passwordService" ref="passwordService" />  
    </bean>  
    <bean id="passwordService"  
        class="org.apache.shiro.authc.credential.DefaultPasswordService">  
        <property name="hashService" ref="hashService"></property>  
        <property name="hashFormat" ref="hashFormat"></property>  
        <property name="hashFormatFactory" ref="hashFormatFactory"></property>  
    </bean>  
    <bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService"></bean>  
    <bean id="hashFormat" class="org.apache.shiro.crypto.hash.format.Shiro1CryptFormat"></bean>  
    <bean id="hashFormatFactory"  
        class="org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory">  
    </bean>  
    
    <!-- 会话ID生成器 -->  
    <bean id="sessionIdGenerator"  
        class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />  
    <!-- 会话Cookie模板 关闭浏览器立即失效 -->  
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <constructor-arg value="sid" />  
        <property name="httpOnly" value="true" />  
        <property name="maxAge" value="-1" />  
    </bean>  
    <!-- 会话DAO -->  
    <bean id="sessionDAO"  
        class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
        <property name="sessionIdGenerator" ref="sessionIdGenerator" />  
    </bean>  
    <!-- 会话验证调度器，每30分钟执行一次验证 ，设定会话超时及保存 -->  
    <bean name="sessionValidationScheduler"  
        class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">  
        <property name="interval" value="1800000" />  
        <property name="sessionManager" ref="sessionManager" />  
    </bean>  
    <!-- 会话管理器 -->  
    <bean id="sessionManager"  
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
        <!-- 全局会话超时时间（单位毫秒），默认30分钟 -->  
        <property name="globalSessionTimeout" value="1800000" />  
        <property name="deleteInvalidSessions" value="true" />  
        <property name="sessionValidationSchedulerEnabled" value="true" />  
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler" />  
        <property name="sessionDAO" ref="sessionDAO" />  
        <property name="sessionIdCookieEnabled" value="true" />  
        <property name="sessionIdCookie" ref="sessionIdCookie" />  
    </bean>  
    
    <!-- 用户授权信息Cache -->  
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />  

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  

    <!-- AOP式方法级权限检查 -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor">  
        <property name="proxyTargetClass" value="true" />  
    </bean>  

	<!-- 支持注解 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>  

</beans>